import logging
from aiogram import Dispatcher, types, F

from aiogram.filters import Command
from aiogram.types import Message
from typing import Callable, Dict, Any, Awaitable
from service.chatai import TerraChatAI
from service.knowledge_base import KnowledgeBase
from utils.config import Config
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

async def cmd_start(message: types.Message):
    await message.answer(
        "ü§ñ –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç TERRA. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞—Ö –∏–ª–∏ –∑–∞—è–≤–∫–∞—Ö."
    )

async def cmd_update(message: types.Message, config: Config):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    if message.from_user.id not in config.ADMINS:
        return await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    kb = KnowledgeBase(config)
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º –±–æ—Ç–∞ –∏ chat_id –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        results = await kb.update_all_sources(
            bot=message.bot,
            chat_id=message.chat.id
        )
        
        # await message.answer(
        #     f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
        #     f"Google Sheets: {results['google_sheets']}\n"
        #     f"Telegram: {results['telegram']}"
        # )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:400]}")
    finally:
        await kb.close()

async def handle_question(message: Message, chat_ai: TerraChatAI):
    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.bot.send_chat_action(
            chat_id=message.chat.id,
            action="typing"
        )
        
        answer = await chat_ai.generate_answer(message.text)
        await message.answer(answer)
    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        logging.error(f"Error: {str(e)}")

class DependencyMiddleware:
    def __init__(self, config: Config, chat_ai: TerraChatAI):
        self.config = config
        self.chat_ai = chat_ai

    async def __call__(self, handler, event, data):
        data["config"] = self.config
        data["chat_ai"] = self.chat_ai
        return await handler(event, data)

def register_handlers(dp: Dispatcher, config: Config):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    chat_ai = TerraChatAI(config)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ middleware
    dp.message.middleware(DependencyMiddleware(config, chat_ai))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_update, Command("update"))
    dp.message.register(
    handle_question, 
    F.text,
    ~Command("start"),
    ~Command("update")
)