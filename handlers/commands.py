import asyncio
from datetime import datetime
import logging
import os
from typing import Optional
from dotenv import load_dotenv
from pyrogram import filters
from pyrogram.types import Message
from pyrogram.client import Client
from pyrogram import enums
from service.chatai import TerraChatAI
from service.knowledge_base import KnowledgeBase
from utils.config import Config
from pyrogram.enums import ChatType
from langchain_core.documents import Document

logger = logging.getLogger(__name__)

class ResponseMode:
    TEST = "test"          # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
    WHITELIST = "whitelist" # –¢–æ–ª—å–∫–æ —á–∞—Ç—ã –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
    PRIVATE = "private"    # –¢–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    ALL = "all"            # –í—Å–µ —á–∞—Ç—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)

async def mark_as_read(client: Client, message: Message):
    """–ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
    try:
        await client.read_chat_history(message.chat.id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {e}")

def register_handlers(app: Client, config: Config):
    chat_ai = TerraChatAI(config,client=app)
    kb = KnowledgeBase(config,app)

    def should_respond(message: Message) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        load_dotenv('.env')
        regime = os.getenv('REGIME', ResponseMode.TEST)
        chat_id = message.chat.id
        
        if regime == ResponseMode.TEST:
            return chat_id == -1001945870336  # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
            
        elif regime == ResponseMode.WHITELIST:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ ID —á–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            if chat_id in config.ALLOWED_CHAT_IDS:
                return True
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ username/—Å—Å—ã–ª–∫–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(message.chat, 'username') and message.chat.username:
                return message.chat.username in config.ALLOWED_CHAT_USERNAMES
            return False
            
        elif regime == ResponseMode.PRIVATE:
            return message.chat.type == ChatType.PRIVATE
            
        elif regime == ResponseMode.ALL:
            return True
            
        return False

    @app.on_message(filters.command("start"))
    async def start(client: Client, message: Message):
        await mark_as_read(client, message)
        await message.reply("ü§ñ –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç TERRA. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞—Ö –∏–ª–∏ –∑–∞—è–≤–∫–∞—Ö.")

    @app.on_message(filters.command("update") & filters.user(config.ADMINS))
    async def update(client: Client, message: Message):
        await mark_as_read(client, message)
        kb = KnowledgeBase(config,client=client)
        chat_ai = TerraChatAI(config, client=client)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é chat_ai
        
        try:
            parts = message.text.split(maxsplit=1)
            if len(parts) < 2:
                await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update (regime)\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: all, sheets, telegram")
                return
                
            regime = parts[1].strip().lower()
            if regime not in ["all", "sheets", "telegram"]:
                await message.reply("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: all, sheets, telegram")
                return

            
                       

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            await kb.update_all_sources(
                bot=client,
                chat_id=message.chat.id,
                telegram_days_offset=config.DAYS_OFFSET,
                regime=regime
            )
            
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º all –∏–ª–∏ sheets - –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            if regime in ["all", "sheets"]:
                try:
                    await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ...")
                    prompt = await kb.get_prompt_from_sheets()
                    logger.info(prompt)
                    if prompt and prompt.strip():
                        if chat_ai.update_prompt(prompt.strip()):
                            await message.reply("‚úÖ –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã!")
                        else:
                            await message.reply("‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å")
                    else:
                        await message.reply("‚ÑπÔ∏è –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                except Exception as e:
                    await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: {str(e)[:200]}")
                    
        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:400]}")
        finally:
            await asyncio.sleep(3)
            await kb.close()

    @app.on_message(filters.command("export_kb") & filters.user(config.ADMINS))
    async def export_knowledge_base(client: Client, message: Message):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ JSON —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        try:
            await message.reply("üîÑ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
            
            kb = KnowledgeBase(config, client=client)
            file_path = await kb.export_to_json()
            
            if not file_path or not os.path.exists(file_path):
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await client.send_document(
                chat_id=message.chat.id,
                document=file_path,
                caption=f"üìö –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ({datetime.now().strftime('%Y-%m-%d')})"
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(file_path)
            
        except Exception as e:
            logger.error(f"Export KB error: {e}")
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)[:200]}")        

    @app.on_message(filters.command("remove_duplicates") & filters.user(config.ADMINS))
    async def handle_remove_duplicates(client: Client, message: Message):
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π."""
        try:
            await message.reply("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)")
            
            kb = KnowledgeBase(config, client=client)
            result = await kb.remove_duplicates()
            
            if "error" in result:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                return
            
            report = (
                "‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {result['total']}\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result['removed']}\n"
                f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {result['remaining']}"
            )
            await message.reply(report)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /remove_duplicates: {e}")
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")

    @app.on_message(filters.command("help"))
    async def help(client: Client, message: Message):
        help_text = """
        üìå **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:
        - `/start` - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã/—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        - `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞.
        –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
        - `/update (regime)` - –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑: all - –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, sheets - —Ç–∞–±–ª–∏—Ü, telegram - —á–∞—Ç–æ–≤.
        - `/kb_stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
        - `/add_qa` - –î–æ–±–∞–≤–∏—Ç—å –í–æ–ø—Ä–æ—Å:–û—Ç–≤–µ—Ç –≤—Ä—É—á–Ω—É—é.
        - `/export_kb` - —ç–∫—Å–ø–æ—Ä—Ç –≤ JSON
        - `/remove_duplicates` ‚Äî —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
         - `/get_prompt` - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç
        - `/set_prompt` - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º)
        """
        await message.reply(help_text)

    @app.on_message(filters.command("add_qa") & filters.user(config.ADMINS))
    async def add_qa(client: Client, message: Message):
        # –ü—Ä–∏–º–µ—Ä: /add_qa –í–æ–ø—Ä–æ—Å? –û—Ç–≤–µ—Ç!
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_qa –í–æ–ø—Ä–æ—Å? –û—Ç–≤–µ—Ç!")
            return
        
        q, a = parts[1].split("?", maxsplit=1)
        doc = Document(
            page_content=q.strip(),
            metadata={"answer": a.strip(), "source": "manual"}
        )
        await kb.vectorstore.aadd_documents([doc])
        await message.reply("‚úÖ Q/A –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")

    @app.on_message(filters.command("kb_stats") & filters.user(config.ADMINS))
    async def kb_stats_handler(client: Client, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
        def truncate_example(text: str, max_length: int = 80) -> str:
            """–û–±—Ä–µ–∑–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
            text = text.replace('\n', ' ')
            if len(text) > max_length:
                return text[:max_length]
            return text

        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
            sources = await kb.get_all_sources()
            if not sources:
                await message.reply("üì≠ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            response = [
                "üìö <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π</b>",
                "",
                f"<b>–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(sources)}",
                f"<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:</b> {sum(src['count'] for src in sources)}",
                ""
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É
            for src in sorted(sources, key=lambda x: x['count'], reverse=True):
                response.extend([
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                    f"üîπ <b>{src['source'].upper()}</b> [<code>{src['count']}</code>]",
                    ""
                ])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã (–ø–µ—Ä–≤—ã–µ 3 –∏–∑ 5)
                for example in src['examples'][:5]:
                    response.append(f"‚ñ™Ô∏è {truncate_example(example)}")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                
                response.append("")

            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            message_text = "\n".join(response)
            if len(message_text) > 4000:
                parts = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]
                for part in parts:
                    await message.reply(part)
                    await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            else:
                await message.reply(message_text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ kb_stats: {e}", exc_info=True)
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.")

    @app.on_message(filters.command("get_prompt") & filters.user(config.ADMINS))
    async def get_prompt(client: Client, message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç"""
        try:
            prompt = await kb.get_prompt_from_sheets()
            if prompt:
                chat_ai.update_prompt(prompt.strip())
            if len(prompt) > 4000:
                parts = [prompt[i:i+4000] for i in range(0, len(prompt), 4000)]
                for part in parts:
                    await message.reply(f"<code>{part}</code>", parse_mode=enums.ParseMode.HTML)
                    await asyncio.sleep(1)
            else:
                await message.reply(f"<code>{prompt}</code>", parse_mode=enums.ParseMode.HTML)
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")

   
    @app.on_message(filters.command("debug_search") & filters.user(config.ADMINS))
    async def debug_search(client: Client, message: Message):
        try:
            query = message.text.split(maxsplit=1)[1]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä with_scores –≤–º–µ—Å—Ç–æ include_scores
            results = await kb.search(query, k=5)
            
            if not results:
                await message.reply("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
                
            response = ["üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î:"]
            for doc, score in results:
                source = doc.metadata.get("source", "unknown")
                response.append(
                    f"‚Ä¢ [{source}] {doc.page_content[:80]}... (score: {score:.2f})"
                )
            
            await message.reply("\n".join(response)[:4000])
        except Exception as e:
            await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    

    @app.on_message(filters.command("set_prompt") & filters.user(config.ADMINS))
    async def set_prompt(client: Client, message: Message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç"""
        try:
            message_text = message.text.split(maxsplit=1)
                
            new_prompt = message_text[1]
            if chat_ai.update_prompt(new_prompt):
                await message.reply("‚úÖ –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {str(e)}")


    @app.on_message(
        filters.text 
        & ~filters.command("start") 
        & ~filters.command("update")
        & ~filters.command("get_prompt")
        & ~filters.command("set_prompt")
    )
    async def handle_question(client: Client, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            load_dotenv('.env')
            regime = os.getenv('REGIME', 'test')
            # if regime == 'test':
            #     if message.chat.id != -1001945870336:
            #         return
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –±–æ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            if not should_respond(message):
                return

            if not message.from_user or not message.text:
                await _safe_reply(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
                return

            if not message.from_user or not message.text:
                await _safe_reply(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
                return
            
            await mark_as_read(client, message)
            # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
            user_id = message.from_user.id
            question = message.text.strip()
            
            if len(question) < 2:
                await _safe_reply(message, "–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                return

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç {user_id}: {question[:100]}...")

            # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç"
            await asyncio.sleep(15)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏
            await client.send_chat_action(message.chat.id, enums.ChatAction.TYPING)
            

            # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            try:
                answer = await asyncio.wait_for(
                    chat_ai.generate_answer(user_id, question),
                    timeout=20.0
                )
                answer = _validate_message(answer)
            except asyncio.TimeoutError:
                logger.warning(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è {user_id}")
                answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                answer = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞"

            # 5. –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            await _safe_reply(message, answer)
            logger.info(f"–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            await _safe_reply(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

    async def _safe_reply(message: Message, text: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"""
        try:
            text = _validate_message(text)
            if not text:
                return False
                
            await message.reply(text)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def _validate_message(text: Optional[str]) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤"""
        if not text:
            return None
            
        # –£–¥–∞–ª—è–µ–º –Ω–µ–ø–µ—á–∞—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        cleaned = "".join(c for c in str(text) if c.isprintable() or c in "\n\r\t")
        cleaned = cleaned.strip()
        
        if not cleaned:
            return None
        
        # –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-—Å–ª–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        STOP_PHRASES = {
            "–∏–∑–≤–∏–Ω–∏—Ç–µ",
            "–Ω–µ –∑–Ω–∞—é", 
            "–Ω–µ –º–æ–≥—É",
            "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "–Ω–µ —É–¥–∞–ª–æ—Å—å",
            "—è –Ω–µ",
            "–º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "–Ω–µ –ø–æ–Ω–∏–º–∞—é",
            "–Ω–µ –∏–º–µ—é –¥–∞–Ω–Ω—ã—Ö",
            "–Ω–µ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-—Ñ—Ä–∞–∑—ã (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        lower_text = cleaned.lower()
        for phrase in STOP_PHRASES:
            if phrase in lower_text:
                return None  # –ü–æ–ª–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ "–ø—É—Å—Ç—ã—Ö" –æ—Ç–≤–µ—Ç–æ–≤
        if len(cleaned.split()) < 3 and any(w in cleaned.lower() for w in ["–Ω–µ—Ç", "–Ω–µ", "–Ω–∏—á–µ–≥–æ"]):
            return None

        # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return cleaned[:4000]


    