import os
import asyncio
import time
import math
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Set, AsyncGenerator
from pyrogram import Client
from pyrogram.types import Message
from langchain_community.vectorstores import Chroma
from langchain_openai import OpenAIEmbeddings
from langchain_core.documents import Document
import logging
from dotenv import load_dotenv

load_dotenv('.env')

logger = logging.getLogger(__name__)

class TelegramParser:
    def __init__(self, vectorstore: Chroma):
        """
        –ü–∞—Ä—Å–µ—Ä Telegram —á–∞—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        
        Args:
            vectorstore: –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Chroma
        """
        self.vectorstore = vectorstore
        self.knowledge_base = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ KnowledgeBase
        self.client = None
        self.embeddings = OpenAIEmbeddings(
            model="text-embedding-3-small",
            openai_api_key=os.getenv("OPENAI_API_KEY")
        )
        self.existing_message_ids: Set[str] = set()
        self.processed_chats: Dict[str, int] = {}
        self.progress_message = None  # –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_message_id = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram"""
        try:
            await self._load_existing_messages()
            self.client = Client(
                "my_account",
                api_id=int(os.getenv("API_ID")),
                api_hash=str(os.getenv("API_HASH")),
                session_string=await self._get_session_string()
            )
            await self.client.start()
            logger.info("–ö–ª–∏–µ–Ω—Ç Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            raise

    async def _load_existing_messages(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            existing = self.vectorstore.get(
                where={"source": "telegram"},
                include=["metadatas"]
            )
            if existing and "metadatas" in existing:
                self.existing_message_ids = {
                    meta["message_id"] for meta in existing["metadatas"]
                    if "message_id" in meta
                }
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.existing_message_ids)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
            self.existing_message_ids = set()

    async def _get_session_string(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏"""
        async with Client(
            "temp_session",
            api_id=int(os.getenv("API_ID")),
            api_hash=str(os.getenv("API_HASH"))
        ) as temp_client:
            return await temp_client.export_session_string()

    async def _update_progress(self, text: str, force_new: bool = False) -> bool:
        """
        –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        if not self.knowledge_base or not hasattr(self.knowledge_base, 'bot'):
            return False

        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–≤–æ–µ
            if self.progress_message and not force_new:
                try:
                    await self.progress_message.edit_text(text)
                    return True
                except Exception as edit_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_msg = await self.knowledge_base.bot.send_message(
                chat_id=self.knowledge_base._chat_id,
                text=text
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if self.progress_message:
                try:
                    await self.progress_message.delete()
                except Exception as delete_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {delete_error}")
            
            self.progress_message = new_msg
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            return False

    async def extract_text(self, message: Message) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if message.text:
                return message.text
            if message.caption:
                return message.caption
            if message.media:
                return f"[–ú–µ–¥–∏–∞: {message.media.__class__.__name__}]"
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return None

    async def process_message(self, message: Message) -> Optional[Document]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç Document"""
        try:
            text = await self.extract_text(message)
            if not text:
                return None

            return Document(
                page_content=text,
                metadata={
                    "chat_id": str(message.chat.id),
                    "chat_title": str(getattr(message.chat, 'title', 'private')),
                    "message_id": str(message.id),
                    "date": message.date.isoformat() if message.date else "",
                    "sender": str(getattr(message.from_user, 'first_name', '')),
                    "source": "telegram"
                }
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return None

    def _generate_progress_bar(self, percent: int, length: int = 10) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        filled = math.ceil(length * percent / 100)
        empty = length - filled
        return f"[{'‚ñà' * filled}{'‚ñë' * empty}] {percent}%"

    async def parse_chat(
        self,
        chat_id: int,
        chat_title: str,
        days_offset: int = 30
    ) -> AsyncGenerator[Document, None]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_offset)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        approx_count = 0
        try:
            chat = await self.client.get_chat(chat_id)
            if hasattr(chat, 'messages'):
                approx_count = min(chat.messages, 1000)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

        await self._update_progress(
            f"üîç –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {chat_title}\n"
            f"‚è≥ –ü–µ—Ä–∏–æ–¥: {start_date.date()} - {end_date.date()}\n"
            f"üìù –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {approx_count if approx_count > 0 else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        )

        total = saved = 0
        last_update = 0
        progress_emoji = "üîÑ"
        progress_interval = max(1, approx_count // 10) if approx_count > 0 else 10
        start_time = time.time()

        async for message in self.client.get_chat_history(chat_id, limit=1000):
            if message.date < start_date:
                continue

            if str(message.id) in self.existing_message_ids:
                continue

            doc = await self.process_message(message)
            if doc:
                self.existing_message_ids.add(str(message.id))
                saved += 1
                yield doc

            total += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if total % progress_interval == 0 or total == 1 or time.time() - last_update > 5:
                progress_percent = min(100, int(total / approx_count * 100)) if approx_count > 0 else 0
                
                # –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
                time_elapsed = time.time() - start_time
                if total > 0 and approx_count > 0:
                    time_remaining = (time_elapsed / total) * (approx_count - total)
                    time_str = f"‚è±Ô∏è ~{timedelta(seconds=int(time_remaining))} –æ—Å—Ç–∞–ª–æ—Å—å"
                else:
                    time_str = ""

                status = (
                    f"{progress_emoji} {chat_title}\n"
                    f"{self._generate_progress_bar(progress_percent)}\n"
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}% ({total}/{approx_count if approx_count > 0 else '?'})\n"
                    f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}\n"
                    f"{time_str}"
                )
                
                await self._update_progress(status)
                last_update = time.time()
                progress_emoji = "‚è≥" if progress_emoji == "üîÑ" else "üîÑ"

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        time_elapsed = timedelta(seconds=int(time.time() - start_time))
        await self._update_progress(
            f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {chat_title}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_elapsed}"
        )
        logger.info(f"–ß–∞—Ç {chat_title}: {saved}/{total} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {time_elapsed}")

    async def full_parse(self, days_offset: int = 30) -> List[Document]:
        """–ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        if not self.client:
            await self.initialize()

        documents = []
        dialogs = [dialog async for dialog in self.client.get_dialogs()]
        
        await self._update_progress(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {len(dialogs)} —á–∞—Ç–æ–≤\n"
            f"‚è≥ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_offset} –¥–Ω–µ–π"
        )

        for i, dialog in enumerate(dialogs, 1):
            chat_title = getattr(dialog.chat, 'title', 'private')
            chat_docs = []
            
            async for doc in self.parse_chat(dialog.chat.id, chat_title, days_offset):
                chat_docs.append(doc)
                if len(chat_docs) % 20 == 0:
                    await self._update_progress(
                        f"üìä {i}/{len(dialogs)} —á–∞—Ç–æ–≤\n"
                        f"üí¨ {chat_title}: {len(chat_docs)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                        f"üìù –í—Å–µ–≥–æ: {len(documents) + len(chat_docs)}"
                    )
            
            documents.extend(chat_docs)
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏

        await self._update_progress(
            f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"‚Ä¢ –ß–∞—Ç–æ–≤: {len(dialogs)}\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {len(documents)}"
        )
        
        return documents