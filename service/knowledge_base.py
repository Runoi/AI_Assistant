import os
import asyncio
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Set
from pathlib import Path
import logging
from pyrogram.types import Message, User
from langchain_core.documents import Document
from langchain_community.vectorstores import Chroma
from langchain_openai import OpenAIEmbeddings
from utils.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class KnowledgeBase:
    def __init__(self, config: Config):
        """
        –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        
        Args:
            config (Config): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.config = config
        self.bot = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –≤—ã–∑–æ–≤–µ update_all_sources
        self._chat_id = None
        self._progress_message = None
        self._progress_message_id = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        self.embeddings = OpenAIEmbeddings(
            model="text-embedding-3-small",
            api_key=config.OPENAI_API_KEY,
            chunk_size=500
        )
        
        chroma_dir = Path("chroma_data").absolute()
        chroma_dir.mkdir(parents=True, exist_ok=True)
        
        self.vectorstore = Chroma(
            persist_directory=str(chroma_dir),
            embedding_function=self.embeddings,
            collection_metadata={"hnsw:space": "cosine"}
        )
        
        # –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
        self._sheets_parser = None
        self._telegram_parser = None
        
        logger.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    @property
    def sheets_parser(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ Google Sheets"""
        if self._sheets_parser is None:
            from service.google_sheet_utils import GoogleSheetsParser
            self._sheets_parser = GoogleSheetsParser(self.vectorstore)
            self._sheets_parser.knowledge_base = self
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä—Å–µ—Ä Google Sheets")
        return self._sheets_parser

    @property
    def telegram_parser(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ Telegram"""
        if self._telegram_parser is None:
            from service.chat_parser import TelegramParser
            self._telegram_parser = TelegramParser(self.vectorstore)
            self._telegram_parser.knowledge_base = self
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä—Å–µ—Ä Telegram")
        return self._telegram_parser

    async def _update_progress(self, text: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        if not self.bot or not self._chat_id:
            return

        text = text[:4096]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–ª—è Telegram
        
        try:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –µ–≥–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            if self._progress_message:
                try:
                    await self._progress_message.edit_text(text)
                    return
                except Exception as edit_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(edit_error)}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self._progress_message = await self.bot.send_message(
                chat_id=self._chat_id,
                text=text
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}", exc_info=True)

    async def search(
        self,
        query: str,
        k: int = 3,
        filters: Optional[Dict] = None
    ) -> List[Document]:
        """
        –ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            filters: –§–∏–ª—å—Ç—Ä—ã –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        """
        try:
            results = await self.vectorstore.asimilarity_search(
                query,
                k=k,
                filter=filters
            )
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            return results
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}", exc_info=True)
            return []

    async def update_all_sources(
        self,
        bot,
        chat_id: int,
        telegram_days_offset: int = 30
    ) -> Dict[str, int]:
        """
        –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            telegram_days_offset: –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –¥–Ω–µ–π –¥–ª—è Telegram
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        self.bot = bot
        self._chat_id = chat_id
        results = {"google_sheets": 0, "telegram": 0}
        
        try:
            # –≠—Ç–∞–ø 1: –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await self._update_progress("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
            
            # –≠—Ç–∞–ø 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets
            await self._update_progress("üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...")
            results["google_sheets"] = await self._update_from_sheets()
            
            # –≠—Ç–∞–ø 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram
            status = f"üì® –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {telegram_days_offset} –¥–Ω–µ–π)..."
            await self._update_progress(status)
            results["telegram"] = await self._update_from_telegram(telegram_days_offset)
            
            # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            total = sum(results.values())
            report = (
                "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                f"‚Ä¢ Google Sheets: {results['google_sheets']}\n"
                f"‚Ä¢ Telegram: {results['telegram']}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {total}"
            )
            await self._update_progress(report)
            
            return results
            
        except Exception as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:400]}"
            await self._update_progress(error_msg)
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", exc_info=True)
            return results
        finally:
            self._cleanup()

    async def _update_from_sheets(self) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
        try:
            documents = await self.sheets_parser.parse_sheet(
                self.config.GOOGLE_SHEET_URL
            )
            
            if documents:
                ids = await self.vectorstore.aadd_documents(documents)
                await self._update_progress(f"‚úÖ Google Sheets: {len(ids)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return len(ids)
                
            await self._update_progress("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets")
            return 0
        except Exception as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Google Sheets: {str(e)[:300]}"
            await self._update_progress(error_msg)
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            return 0

    async def _update_from_telegram(self, days_offset: int) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram"""
        try:
            if not self.telegram_parser:
                raise ValueError("–ü–∞—Ä—Å–µ—Ä Telegram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            documents = await self.telegram_parser.full_parse(days_offset=days_offset)
            
            if documents:
                ids = await self.vectorstore.aadd_documents(documents)
                msg = f"‚úÖ Telegram: {len(ids)} —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_offset} –¥–Ω–µ–π)"
                await self._update_progress(msg)
                return len(ids)
                
            await self._update_progress(f"‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –∑–∞ {days_offset} –¥–Ω–µ–π")
            return 0
            
        except Exception as e:
            error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram: {str(e)[:300]}"
            await self._update_progress(error_msg)
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
            return 0

    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        self.bot = None
        self._chat_id = None
        self._progress_message = None
        logger.info("–†–µ—Å—É—Ä—Å—ã KnowledgeBase –æ—á–∏—â–µ–Ω—ã")

    async def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if hasattr(self, 'vectorstore'):
                del self.vectorstore
            self._cleanup()
            logger.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–∫—Ä—ã—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏: {str(e)}")